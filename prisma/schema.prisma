// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  username  String      @unique @db.VarChar(255)
  email     String      @unique @db.VarChar(255)
  password  String      @db.VarChar(255)
  avatar    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Session   Session[]
  Character Character[]
  Bookmark  Bookmark[]
<<<<<<< Updated upstream
=======
  Historic  History[]
  Spell     Spell[]
>>>>>>> Stashed changes
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int?
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CharacterAligments {
  CHAOTIC_EVIL
  CHAOTIC_GOOD
  CHAOTIC_NEUTRAL
  LAWFUL_EVIL
  LAWFUL_GOOD
  LAWFUL_NEUTRAL
  NEUTRAL
  NEUTRAL_EVIL
  NEUTRAL_GOOD
}

enum CharacterRaces {
  DRAGONBORN
  DWARF
  ELF
  GNOME
  HALF_ELF
  HALFLING
  HALF_ORC
  HUMAN
  TIEFLING
}

enum CharacterClasses {
  BARBARIAN
  BARD
  CLERIC
  DRUID
  FIGHTER
  MONK
  PALADIN
  RANGER
  ROGUE
  SORCERER
  WARLOCK
  WIZARD
}

model Character {
  id                 Int                @id @default(autoincrement())
  userId             Int?
  User               User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  name               String             @db.VarChar(255)
  portrait           String?
  level              Int
  race               CharacterRaces
  class              CharacterClasses
  aligment           CharacterAligments
  background         String?
  strenght           Int
  dexterity          Int
  constitution       Int
  intelligence       Int
  wisdom             Int
  charisma           Int
  languages          String?
  personality_traits String?
  ideals             String?
  bonds              String?
  flaws              String?
  hair               String?
  skin               String?
  eyes               String?
  height             String?
  weight             Int?
  age                Int?
  organizations      String?
  allies             String?
  enemies            String?
  backstory          String?
  other_notes        String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

enum TypeBookmark {
  MONSTER
  SPELL
  EQUIPMENT
  MAGIC_ITEM
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  index     String
  name      String
<<<<<<< Updated upstream
  type      TypeBookmark
=======
  type      TypeInfo
  userId    Int?
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model History {
  id        Int      @id @default(autoincrement())
  index     String
  name      String
  type      TypeInfo
>>>>>>> Stashed changes
  userId    Int?
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Spell {
  id     Int   @id @default(autoincrement())
  userId Int?
  User   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  spell  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
